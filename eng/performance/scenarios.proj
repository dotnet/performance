<Project Sdk="Microsoft.DotNet.Helix.Sdk" DefaultTargets="Test">

  <ItemGroup>
    <HelixCorrelationPayload Include="$(CorrelationPayloadDirectory)">
      <PayloadDirectory>%(Identity)</PayloadDirectory>
    </HelixCorrelationPayload>
  </ItemGroup>

  <PropertyGroup Condition="'$(TargetsWindows)' == 'true'">
    <ScenariosDir>$(WorkItemDirectory)\src\scenarios\</ScenariosDir>
    <HelixPreCommands>$(HelixPreCommands);set PYTHONPATH=%HELIX_CORRELATION_PAYLOAD%\scripts%3B%HELIX_CORRELATION_PAYLOAD%</HelixPreCommands>
    <RID>win-$(Architecture)</RID>
  </PropertyGroup>

  <PropertyGroup Condition="'$(TargetsWindows)' != 'true'">
    <ScenariosDir>$(WorkItemDirectory)/src/scenarios/</ScenariosDir>
    <HelixPreCommands>$(HelixPreCommands);sudo apt-get update;chmod +x $HELIX_CORRELATION_PAYLOAD/startup/perfcollect</HelixPreCommands>
    <HelixPreCommands>$(HelixPreCommands);export PYTHONPATH=$HELIX_CORRELATION_PAYLOAD/scripts:$HELIX_CORRELATION_PAYLOAD</HelixPreCommands>
    <RID>linux-$(Architecture)</RID>
  </PropertyGroup>

  <ItemDefinitionGroup>
      <HelixWorkItem>
      <Timeout>4:00</Timeout>
    </HelixWorkItem>
  </ItemDefinitionGroup>
  

  <ItemGroup>
    <Scenario Include="Static Console Template">
      <PayloadDirectory>$(ScenariosDir)staticconsoletemplate</PayloadDirectory>
    </Scenario>
    <Scenario Include="Static VB Console Template">
      <PayloadDirectory>$(ScenariosDir)staticvbconsoletemplate</PayloadDirectory>
    </Scenario>
    <Scenario Include="Static F# Console Template">
      <PayloadDirectory>$(ScenariosDir)staticfsconsoletemplate</PayloadDirectory>
    </Scenario>
    <!-- <Scenario Include="Static Winforms Template" Condition="'$(PERFLAB_Framework)' != 'netcoreapp5.0'">
      <PayloadDirectory>$(ScenariosDir)staticwinformstemplate</PayloadDirectory>
    </Scenario> -->
    <Scenario Include="New Console Template">
      <PayloadDirectory>$(ScenariosDir)emptyconsoletemplate</PayloadDirectory>
    </Scenario>
    <Scenario Include="New VB Console Template">
      <PayloadDirectory>$(ScenariosDir)emptyvbconsoletemplate</PayloadDirectory>
    </Scenario>
    <UIScenario Include="WinForms Large" Condition="'$(TargetsWindows)' == 'true'">
      <PayloadDirectory>$(ScenariosDir)windowsformslarge</PayloadDirectory>
    </UIScenario>
    <UIScenario Include="WPF Template" Condition="'$(TargetsWindows)' == 'true'">
      <PayloadDirectory>$(ScenariosDir)wpf</PayloadDirectory>
    </UIScenario>
    <UIScenario Include="WPF SFC" Condition="'$(TargetsWindows)' == 'true'">
      <PayloadDirectory>$(ScenariosDir)wpfsfc</PayloadDirectory>
    </UIScenario>
    <UIScenario Include="PaintDotNet" Condition="'$(TargetsWindows)' == 'true' And $(BUILD_REPOSITORY_PROVIDER) == 'TfsGit'">
      <PayloadDirectory>$(ScenariosDir)paintdotnet</PayloadDirectory>
    </UIScenario>
  </ItemGroup>


  <!-- UI Startup FDD publish -->
  <ItemGroup>
    <HelixWorkItem Include="@(UIScenario -> 'Startup - %(Identity) - FDD Publish')">
      <PreCommands>$(Python) pre.py publish -f $(PERFLAB_Framework) -c Release --windowsui</PreCommands>
      <Command>$(Python) test.py startup --scenario-name &quot;%(Identity)&quot;</Command>
    </HelixWorkItem>
  </ItemGroup>

  <!-- Startup FDD publish -->
  <ItemGroup>
    <HelixWorkItem Include="@(Scenario -> 'Startup - %(Identity) - FDD Publish')">
      <PreCommands>$(Python) pre.py publish -f $(PERFLAB_Framework) -c Release</PreCommands>
      <Command>$(Python) test.py startup --scenario-name &quot;%(Identity)&quot;</Command>
    </HelixWorkItem>
  </ItemGroup>

  <!-- SOD FDD publish -->
  <ItemGroup>
    <HelixWorkItem Include="@(Scenario -> 'SOD - %(Identity) - FDD Publish')">
      <PreCommands>$(Python) pre.py publish -f $(PERFLAB_Framework) -c Release</PreCommands>
      <Command>$(Python) test.py sod --scenario-name &quot;%(Identity)&quot;</Command>
    </HelixWorkItem>
  </ItemGroup>

  <!-- SOD SCD publish w/ RID -->
  <ItemGroup>
    <HelixWorkItem Include="@(Scenario -> 'SOD - %(Identity) - SCD Publish')">
      <PreCommands>$(Python) pre.py publish -f $(PERFLAB_Framework) -c Release -r $(RID)</PreCommands>
      <Command>$(Python) test.py sod --scenario-name &quot;%(Identity)&quot;</Command>
    </HelixWorkItem>
  </ItemGroup>

  <!-- SOD build -->
  <ItemGroup>
    <HelixWorkItem Include="@(Scenario -> 'SOD - %(Identity) - Build')">
      <PreCommands>$(Python) pre.py build -c Release -f $(PERFLAB_Framework)</PreCommands>
      <Command>$(Python) test.py sod --scenario-name &quot;%(Identity)&quot;</Command>
    </HelixWorkItem>
  </ItemGroup>

  <ItemGroup Condition="'$(TargetsWindows)' == 'true'">
    <!-- SOD & Device Startup for Windows Desktop MAUI -->
    <HelixWorkItem Include="SOD - Desktop Maui Unpackaged">
      <PayloadDirectory>$(ScenariosDir)mauidesktop</PayloadDirectory>
      <PreCommands>$(Python) pre.py publish -c Release -f $(PERFLAB_Framework)-windows10.0.19041.0</PreCommands>
      <Command>$(Python) test.py sod --scenario-name &quot;%(Identity)&quot;</Command>
    </HelixWorkItem>
    <HelixWorkItem Include="Device Startup - Desktop Maui Default">
      <PayloadDirectory>$(ScenariosDir)mauidesktop</PayloadDirectory>
      <PreCommands>$(Python) pre.py publish -c Release -f $(PERFLAB_Framework)-windows10.0.19041.0</PreCommands>
      <Command>$(Python) test.py startup --scenario-name &quot;%(Identity)&quot;</Command>
    </HelixWorkItem>

    <!-- SOD & Device Startup for Windows Desktop MAUI Blazor -->
    <HelixWorkItem Include="SOD - Desktop Maui Blazor Unpackaged">
      <PayloadDirectory>$(ScenariosDir)mauiblazordesktop</PayloadDirectory>
      <PreCommands>$(Python) pre.py publish -c Release -f $(PERFLAB_Framework)-windows10.0.19041.0</PreCommands>
      <Command>$(Python) test.py sod --scenario-name &quot;%(Identity)&quot;</Command>
    </HelixWorkItem>
    <HelixWorkItem Include="Device Startup - Desktop Maui Blazor Default">
      <PayloadDirectory>$(ScenariosDir)mauiblazordesktop</PayloadDirectory>
      <PreCommands>$(Python) pre.py publish -c Release -f $(PERFLAB_Framework)-windows10.0.19041.0</PreCommands>
      <Command>$(Python) test.py startup --scenario-name &quot;%(Identity)&quot;</Command>
    </HelixWorkItem>
  </ItemGroup>

  <!--
    This is useful for local testing to print the produced helix items
    To use this when you are changing how items are produced, uncomment the target
    and replace the Project item at the top of the file with this:
    <Project DefaultTargets="printItems">
    
    Once you've done that you can run this to see the results:
    dotnet msbuild .\scenarios.proj /v:n
   -->
  <!-- <Target Name="printItems">
        <Message Text="@(HelixWorkItem -> 'name: %(HelixWorkItem.Identity)
     dir: %(HelixWorkItem.PayloadDirectory)
     pre: %(HelixWorkItem.PreCommands)
     command: %(HelixWorkItem.Command)
     post: %(HelixWorkItem.PostCommands)
     timeout: %(HelixWorkItem.Timeout)  '"/>
  </Target> -->

</Project>
