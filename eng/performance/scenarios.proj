<Project Sdk="Microsoft.DotNet.Helix.Sdk" DefaultTargets="Test">

  <ItemGroup>
    <HelixCorrelationPayload Include="$(CorrelationPayloadDirectory)">
      <PayloadDirectory>%(Identity)</PayloadDirectory>
    </HelixCorrelationPayload>
  </ItemGroup>

  <PropertyGroup Condition="'$(TargetsWindows)' == 'true'">
    <ScenariosDir>$(WorkItemDirectory)\src\scenarios\</ScenariosDir>
    <HelixPreCommands>$(HelixPreCommands);set PYTHONPATH=%HELIX_CORRELATION_PAYLOAD%\scripts%3B%HELIX_CORRELATION_PAYLOAD%</HelixPreCommands>
    <RID>win-$(Architecture)</RID>
  </PropertyGroup>

  <PropertyGroup Condition="'$(TargetsWindows)' != 'true'">
    <ScenariosDir>$(WorkItemDirectory)/src/scenarios/</ScenariosDir>
    <HelixPreCommands>$(HelixPreCommands);sudo apt-get update;chmod +x $HELIX_CORRELATION_PAYLOAD/startup/perfcollect</HelixPreCommands>
    <HelixPreCommands>$(HelixPreCommands);export PYTHONPATH=$HELIX_CORRELATION_PAYLOAD/scripts:$HELIX_CORRELATION_PAYLOAD</HelixPreCommands>
    <RID>linux-$(Architecture)</RID>
  </PropertyGroup>

  <ItemDefinitionGroup>
    <HelixWorkItem>
      <Timeout>4:00</Timeout>
    </HelixWorkItem>
  </ItemDefinitionGroup>

  <PropertyGroup>
    <AfterPreparePayloadWorkItemCommand>$(Python) post.py</AfterPreparePayloadWorkItemCommand>
    <PreparePayloadOutDirectoryName>scenarios_out</PreparePayloadOutDirectoryName>
    <PreparePayloadWorkItemBaseDirectory Condition="'$(TargetsWindows)' == 'true'">$(CorrelationPayloadDirectory)$(PreparePayloadOutDirectoryName)\</PreparePayloadWorkItemBaseDirectory>
    <PreparePayloadWorkItemBaseDirectory Condition="'$(TargetsWindows)' != 'true'">$(CorrelationPayloadDirectory)$(PreparePayloadOutDirectoryName)/</PreparePayloadWorkItemBaseDirectory>
  </PropertyGroup>

  
  <Target Name="RemoveDotnetFromCorrelationStaging" BeforeTargets="BeforeTest">
    <Message Text="Removing Dotnet Packs from Correlation Staging" Importance="high" />
    <RemoveDir Directories="$(CorrelationPayloadDirectory)dotnet\packs" />
  </Target>

  <ItemGroup>
    <Scenario Include="Static Console Template">
      <ScenarioDirectoryName>staticconsoletemplate</ScenarioDirectoryName>
      <PayloadDirectory>$(ScenariosDir)%(ScenarioDirectoryName)</PayloadDirectory>
    </Scenario>
    <Scenario Include="Static VB Console Template">
      <ScenarioDirectoryName>staticvbconsoletemplate</ScenarioDirectoryName>
      <PayloadDirectory>$(ScenariosDir)%(ScenarioDirectoryName)</PayloadDirectory>
    </Scenario>
    <Scenario Include="New Console Template">
      <ScenarioDirectoryName>emptyconsoletemplate</ScenarioDirectoryName>
      <PayloadDirectory>$(ScenariosDir)%(ScenarioDirectoryName)</PayloadDirectory>
    </Scenario>
    <Scenario Include="New VB Console Template">
      <ScenarioDirectoryName>emptyvbconsoletemplate</ScenarioDirectoryName>
      <PayloadDirectory>$(ScenariosDir)%(ScenarioDirectoryName)</PayloadDirectory>
    </Scenario>
    
    <MAUIScenario Include="Desktop Maui" Condition="'$(TargetsWindows)' == 'true' And '$(Architecture)' != 'arm64' And '$(Architecture)' != 'arm'">
      <ScenarioDirectoryName>mauidesktop</ScenarioDirectoryName>
      <PayloadDirectory>$(ScenariosDir)%(ScenarioDirectoryName)</PayloadDirectory>
    </MAUIScenario>
    <MAUIScenario Include="Desktop Maui Blazor" Condition="'$(TargetsWindows)' == 'true' And '$(Architecture)' != 'arm64' And '$(Architecture)' != 'arm'">
      <ScenarioDirectoryName>mauiblazordesktop</ScenarioDirectoryName>
      <PayloadDirectory>$(ScenariosDir)%(ScenarioDirectoryName)</PayloadDirectory>
    </MAUIScenario>
  </ItemGroup>


  <ItemGroup>
    <PreparePayloadWorkItem Include="@(Scenario)">
      <Command>$(Python) pre.py publish -f $(_Framework) -c Release -o $(PreparePayloadWorkItemBaseDirectory)%(PreparePayloadWorkItem.ScenarioDirectoryName)_fdd</Command>
      <WorkingDirectory>%(PreparePayloadWorkItem.PayloadDirectory)</WorkingDirectory>
    </PreparePayloadWorkItem>
    <PreparePayloadWorkItem Include="@(Scenario)">
      <Command>$(Python) pre.py publish -f $(_Framework) -c Release -r $(RID) -o $(PreparePayloadWorkItemBaseDirectory)%(PreparePayloadWorkItem.ScenarioDirectoryName)_scd</Command>
      <WorkingDirectory>%(PreparePayloadWorkItem.PayloadDirectory)</WorkingDirectory>
    </PreparePayloadWorkItem>
    <PreparePayloadWorkItem Include="@(Scenario)">
      <Command>$(Python) pre.py build -c Release -f $(_Framework) -o $(PreparePayloadWorkItemBaseDirectory)%(PreparePayloadWorkItem.ScenarioDirectoryName)_build</Command>
      <WorkingDirectory>%(PreparePayloadWorkItem.PayloadDirectory)</WorkingDirectory>
    </PreparePayloadWorkItem>
    <PreparePayloadWorkItem Include="@(MAUIScenario)">
      <Command>$(Python) pre.py publish -c Release -f $(_Framework)-windows10.0.19041.0 -o $(PreparePayloadWorkItemBaseDirectory)%(PreparePayloadWorkItem.ScenarioDirectoryName)_fdd</Command>
      <WorkingDirectory>%(PreparePayloadWorkItem.PayloadDirectory)</WorkingDirectory>
    </PreparePayloadWorkItem>
  </ItemGroup>


  <!-- Startup FDD publish -->
  <ItemGroup>
    <HelixWorkItem Include="@(Scenario -> 'Startup - %(Identity) - FDD Publish')">
      <PreCommands Condition="'$(TargetsWindows)' == 'true'">xcopy %HELIX_CORRELATION_PAYLOAD%\$(PreparePayloadOutDirectoryName)\%(HelixWorkItem.ScenarioDirectoryName)_fdd %HELIX_WORKITEM_ROOT%\pub /E /I /Y</PreCommands>
      <PreCommands Condition="'$(TargetsWindows)' != 'true'">cp -r $HELIX_CORRELATION_PAYLOAD/$(PreparePayloadOutDirectoryName)/%(HelixWorkItem.ScenarioDirectoryName)_fdd $HELIX_WORKITEM_ROOT/pub</PreCommands>
      <Command>$(Python) test.py startup --scenario-name &quot;%(Identity)&quot;</Command>
    </HelixWorkItem>
  </ItemGroup>

  <!-- SOD FDD publish -->
  <ItemGroup>
    <HelixWorkItem Include="@(Scenario -> 'SOD - %(Identity) - FDD Publish')">
      <PreCommands Condition="'$(TargetsWindows)' == 'true'">xcopy %HELIX_CORRELATION_PAYLOAD%\$(PreparePayloadOutDirectoryName)\%(HelixWorkItem.ScenarioDirectoryName)_fdd %HELIX_WORKITEM_ROOT%\pub /E /I /Y</PreCommands>
      <PreCommands Condition="'$(TargetsWindows)' != 'true'">cp -r $HELIX_CORRELATION_PAYLOAD/$(PreparePayloadOutDirectoryName)/%(HelixWorkItem.ScenarioDirectoryName)_fdd $HELIX_WORKITEM_ROOT/pub</PreCommands>
      <Command>$(Python) test.py sod --scenario-name &quot;%(Identity)&quot;</Command>
    </HelixWorkItem>
  </ItemGroup>

  <!-- SOD SCD publish w/ RID -->
  <ItemGroup>
    <HelixWorkItem Include="@(Scenario -> 'SOD - %(Identity) - SCD Publish')">
      <PreCommands Condition="'$(TargetsWindows)' == 'true'">xcopy %HELIX_CORRELATION_PAYLOAD%\$(PreparePayloadOutDirectoryName)\%(HelixWorkItem.ScenarioDirectoryName)_scd %HELIX_WORKITEM_ROOT%\pub /E /I /Y</PreCommands>
      <PreCommands Condition="'$(TargetsWindows)' != 'true'">cp -r $HELIX_CORRELATION_PAYLOAD/$(PreparePayloadOutDirectoryName)/%(HelixWorkItem.ScenarioDirectoryName)_scd $HELIX_WORKITEM_ROOT/pub</PreCommands>
      <Command>$(Python) test.py sod --scenario-name &quot;%(Identity)&quot;</Command>
    </HelixWorkItem>
  </ItemGroup>

  <!-- SOD build -->
  <ItemGroup>
    <HelixWorkItem Include="@(Scenario -> 'SOD - %(Identity) - Build')">
      <PreCommands Condition="'$(TargetsWindows)' == 'true'">xcopy %HELIX_CORRELATION_PAYLOAD%\$(PreparePayloadOutDirectoryName)\%(HelixWorkItem.ScenarioDirectoryName)_build %HELIX_WORKITEM_ROOT%\bin /E /I /Y</PreCommands>
      <PreCommands Condition="'$(TargetsWindows)' != 'true'">cp -r $HELIX_CORRELATION_PAYLOAD/$(PreparePayloadOutDirectoryName)/%(HelixWorkItem.ScenarioDirectoryName)_build $HELIX_WORKITEM_ROOT/bin</PreCommands>
      <Command>$(Python) test.py sod --scenario-name &quot;%(Identity)&quot;</Command>
    </HelixWorkItem>
  </ItemGroup>

  <!-- MAUI -->
  <ItemGroup>
    <HelixWorkItem Include="@(MAUIScenario -> 'SOD - %(Identity) Unpackaged')">
      <PreCommands Condition="'$(TargetsWindows)' == 'true'">xcopy %HELIX_CORRELATION_PAYLOAD%\$(PreparePayloadOutDirectoryName)\%(HelixWorkItem.ScenarioDirectoryName)_fdd %HELIX_WORKITEM_ROOT%\pub /E /I /Y</PreCommands>
      <PreCommands Condition="'$(TargetsWindows)' != 'true'">cp -r $HELIX_CORRELATION_PAYLOAD/$(PreparePayloadOutDirectoryName)/%(HelixWorkItem.ScenarioDirectoryName)_fdd $HELIX_WORKITEM_ROOT/pub</PreCommands>
      <Command>$(Python) test.py sod --scenario-name &quot;%(Identity)&quot;</Command>
    </HelixWorkItem>
    <HelixWorkItem Include="@(MAUIScenario -> 'Device Startup - %(Identity) Default')">
      <PreCommands Condition="'$(TargetsWindows)' == 'true'">xcopy %HELIX_CORRELATION_PAYLOAD%\$(PreparePayloadOutDirectoryName)\%(HelixWorkItem.ScenarioDirectoryName)_fdd %HELIX_WORKITEM_ROOT%\pub /E /I /Y</PreCommands>
      <PreCommands Condition="'$(TargetsWindows)' != 'true'">cp -r $HELIX_CORRELATION_PAYLOAD/$(PreparePayloadOutDirectoryName)/%(HelixWorkItem.ScenarioDirectoryName)_fdd $HELIX_WORKITEM_ROOT/pub</PreCommands>
      <Command>$(Python) test.py startup --scenario-name &quot;%(Identity)&quot;</Command>
    </HelixWorkItem>
  </ItemGroup>


  <Import Project="PreparePayloadWorkItems.targets" />


  <!--
    This is useful for local testing to print the produced helix items
    To use this when you are changing how items are produced, uncomment the target
    and replace the Project item at the top of the file with this:
    <Project DefaultTargets="printItems">
    
    Once you've done that you can run this to see the results:
    dotnet msbuild .\scenarios.proj /v:n
   -->
  <!-- <Target Name="printItems">
        <Message Text="@(HelixWorkItem -> 'name: %(HelixWorkItem.Identity)
     dir: %(HelixWorkItem.PayloadDirectory)
     pre: %(HelixWorkItem.PreCommands)
     command: %(HelixWorkItem.Command)
     post: %(HelixWorkItem.PostCommands)
     timeout: %(HelixWorkItem.Timeout)  '"/>
  </Target> -->

</Project>
