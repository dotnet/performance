<Project Sdk="Microsoft.DotNet.Helix.Sdk" DefaultTargets="Test">

  <Import Project="Scenarios.Common.props" />

  <PropertyGroup>
    <AfterPreparePayloadWorkItemCommand>$(Python) post.py</AfterPreparePayloadWorkItemCommand>
    <PreparePayloadOutDirectoryName>scenarios_out</PreparePayloadOutDirectoryName>
    <PreparePayloadWorkItemBaseDirectory Condition="'$(TargetsWindows)' == 'true'">$(CorrelationPayloadDirectory)$(PreparePayloadOutDirectoryName)\</PreparePayloadWorkItemBaseDirectory>
    <PreparePayloadWorkItemBaseDirectory Condition="'$(TargetsWindows)' != 'true'">$(CorrelationPayloadDirectory)$(PreparePayloadOutDirectoryName)/</PreparePayloadWorkItemBaseDirectory>
  </PropertyGroup>


  <ItemGroup>
    <Scenario Include="Static Console Template">
      <ScenarioDirectoryName>staticconsoletemplate</ScenarioDirectoryName>
      <PayloadDirectory>$(ScenariosDir)%(ScenarioDirectoryName)</PayloadDirectory>
    </Scenario>
    <Scenario Include="Static VB Console Template">
      <ScenarioDirectoryName>staticvbconsoletemplate</ScenarioDirectoryName>
      <PayloadDirectory>$(ScenariosDir)%(ScenarioDirectoryName)</PayloadDirectory>
    </Scenario>
    <Scenario Include="Static F# Console Template">
      <ScenarioDirectoryName>staticfsconsoletemplate</ScenarioDirectoryName>
      <PayloadDirectory>$(ScenariosDir)%(ScenarioDirectoryName)</PayloadDirectory>
    </Scenario>
    <!-- <Scenario Include="Static Winforms Template" Condition="'$(PERFLAB_Framework)' != 'netcoreapp5.0'">
      <ScenarioDirectoryName>staticwinformstemplate</ScenarioDirectoryName>
      <PayloadDirectory>$(ScenariosDir)%(ScenarioDirectoryName)</PayloadDirectory>
    </Scenario> -->
    <Scenario Include="New Console Template">
      <ScenarioDirectoryName>emptyconsoletemplate</ScenarioDirectoryName>
      <PayloadDirectory>$(ScenariosDir)%(ScenarioDirectoryName)</PayloadDirectory>
    </Scenario>
    <Scenario Include="New VB Console Template">
      <ScenarioDirectoryName>emptyvbconsoletemplate</ScenarioDirectoryName>
      <PayloadDirectory>$(ScenariosDir)%(ScenarioDirectoryName)</PayloadDirectory>
    </Scenario>
    <UIScenario Include="WinForms Large" Condition="'$(TargetsWindows)' == 'true' AND '$(OS)' == 'Windows_NT'">
      <ScenarioDirectoryName>windowsformslarge</ScenarioDirectoryName>
      <PayloadDirectory>$(ScenariosDir)%(ScenarioDirectoryName)</PayloadDirectory>
    </UIScenario>
    <UIScenario Include="WPF Template" Condition="'$(TargetsWindows)' == 'true' AND '$(OS)' == 'Windows_NT'">
      <ScenarioDirectoryName>wpf</ScenarioDirectoryName>
      <PayloadDirectory>$(ScenariosDir)%(ScenarioDirectoryName)</PayloadDirectory>
    </UIScenario>
    <UIScenario Include="WPF SFC" Condition="'$(TargetsWindows)' == 'true' AND '$(OS)' == 'Windows_NT'">
      <ScenarioDirectoryName>wpfsfc</ScenarioDirectoryName>
      <PayloadDirectory>$(ScenariosDir)%(ScenarioDirectoryName)</PayloadDirectory>
    </UIScenario>
    <UIScenario Include="PaintDotNet" Condition="'$(TargetsWindows)' == 'true' And $(BUILD_REPOSITORY_PROVIDER) == 'TfsGit' And '$(Architecture)' != 'x86'">
      <ScenarioDirectoryName>paintdotnet</ScenarioDirectoryName>
      <PayloadDirectory>$(ScenariosDir)%(ScenarioDirectoryName)</PayloadDirectory>
      <ExplicitPrepareCommand>$(Python) pre.py extract -p $(CorrelationPayloadDirectory)PDN\PDN.zip -o $(PreparePayloadWorkItemBaseDirectory)%(ScenarioDirectoryName)_fdd</ExplicitPrepareCommand>
    </UIScenario>
  </ItemGroup>


  <ItemGroup>
    <PreparePayloadWorkItem Include="@(UIScenario)">
      <Command Condition="'%(PreparePayloadWorkItem.ExplicitPrepareCommand)' != ''">%(PreparePayloadWorkItem.ExplicitPrepareCommand)</Command>
      <Command Condition="'%(PreparePayloadWorkItem.ExplicitPrepareCommand)' == ''">$(Python) pre.py publish -f $(PERFLAB_Framework) -c Release --windowsui -r $(RID) --no-self-contained -o $(PreparePayloadWorkItemBaseDirectory)%(PreparePayloadWorkItem.ScenarioDirectoryName)_fdd</Command>
      <WorkingDirectory>%(PreparePayloadWorkItem.PayloadDirectory)</WorkingDirectory>
    </PreparePayloadWorkItem>
    <PreparePayloadWorkItem Include="@(Scenario)">
      <Command>$(Python) pre.py publish -f $(PERFLAB_Framework) -c Release -r $(RID) --no-self-contained -o $(PreparePayloadWorkItemBaseDirectory)%(PreparePayloadWorkItem.ScenarioDirectoryName)_fdd</Command>
      <WorkingDirectory>%(PreparePayloadWorkItem.PayloadDirectory)</WorkingDirectory>
    </PreparePayloadWorkItem>
    <PreparePayloadWorkItem Include="@(Scenario)">
      <Command>$(Python) pre.py publish -f $(PERFLAB_Framework) -c Release -r $(RID) --self-contained -o $(PreparePayloadWorkItemBaseDirectory)%(PreparePayloadWorkItem.ScenarioDirectoryName)_scd</Command>
      <WorkingDirectory>%(PreparePayloadWorkItem.PayloadDirectory)</WorkingDirectory>
    </PreparePayloadWorkItem>
    <PreparePayloadWorkItem Include="@(Scenario)">
      <Command>$(Python) pre.py build -f $(PERFLAB_Framework) -c Release -o $(PreparePayloadWorkItemBaseDirectory)%(PreparePayloadWorkItem.ScenarioDirectoryName)_build</Command>
      <WorkingDirectory>%(PreparePayloadWorkItem.PayloadDirectory)</WorkingDirectory>
    </PreparePayloadWorkItem>
  </ItemGroup>


  <!-- UI Startup FDD publish -->
  <ItemGroup>
    <HelixWorkItem Include="@(UIScenario -> 'Startup - %(Identity) - FDD Publish')">
      <PreCommands Condition="'$(TargetsWindows)' == 'true'">xcopy %HELIX_CORRELATION_PAYLOAD%\$(PreparePayloadOutDirectoryName)\%(HelixWorkItem.ScenarioDirectoryName)_fdd %HELIX_WORKITEM_ROOT%\pub /E /I /Y</PreCommands>
      <PreCommands Condition="'$(TargetsWindows)' != 'true'">cp -r $HELIX_CORRELATION_PAYLOAD/$(PreparePayloadOutDirectoryName)/%(HelixWorkItem.ScenarioDirectoryName)_fdd $HELIX_WORKITEM_ROOT/pub</PreCommands>
      <Command>$(Python) test.py startup --scenario-name &quot;%(Identity)&quot;</Command>
    </HelixWorkItem>
  </ItemGroup>

  <!-- Startup FDD publish -->
  <ItemGroup>
    <HelixWorkItem Include="@(Scenario -> 'Startup - %(Identity) - FDD Publish')">
      <PreCommands Condition="'$(TargetsWindows)' == 'true'">xcopy %HELIX_CORRELATION_PAYLOAD%\$(PreparePayloadOutDirectoryName)\%(HelixWorkItem.ScenarioDirectoryName)_fdd %HELIX_WORKITEM_ROOT%\pub /E /I /Y</PreCommands>
      <PreCommands Condition="'$(TargetsWindows)' != 'true'">cp -r $HELIX_CORRELATION_PAYLOAD/$(PreparePayloadOutDirectoryName)/%(HelixWorkItem.ScenarioDirectoryName)_fdd $HELIX_WORKITEM_ROOT/pub</PreCommands>
      <Command>$(Python) test.py startup --scenario-name &quot;%(Identity)&quot;</Command>
    </HelixWorkItem>
  </ItemGroup>

  <!-- SOD FDD publish -->
  <ItemGroup>
    <HelixWorkItem Include="@(Scenario -> 'SOD - %(Identity) - FDD Publish')">
      <PreCommands Condition="'$(TargetsWindows)' == 'true'">xcopy %HELIX_CORRELATION_PAYLOAD%\$(PreparePayloadOutDirectoryName)\%(HelixWorkItem.ScenarioDirectoryName)_fdd %HELIX_WORKITEM_ROOT%\pub /E /I /Y</PreCommands>
      <PreCommands Condition="'$(TargetsWindows)' != 'true'">cp -r $HELIX_CORRELATION_PAYLOAD/$(PreparePayloadOutDirectoryName)/%(HelixWorkItem.ScenarioDirectoryName)_fdd $HELIX_WORKITEM_ROOT/pub</PreCommands>
      <Command>$(Python) test.py sod --scenario-name &quot;%(Identity)&quot;</Command>
    </HelixWorkItem>
  </ItemGroup>

  <!-- SOD SCD publish w/ RID -->
  <ItemGroup>
    <HelixWorkItem Include="@(Scenario -> 'SOD - %(Identity) - SCD Publish')">
      <PreCommands Condition="'$(TargetsWindows)' == 'true'">xcopy %HELIX_CORRELATION_PAYLOAD%\$(PreparePayloadOutDirectoryName)\%(HelixWorkItem.ScenarioDirectoryName)_scd %HELIX_WORKITEM_ROOT%\pub /E /I /Y</PreCommands>
      <PreCommands Condition="'$(TargetsWindows)' != 'true'">cp -r $HELIX_CORRELATION_PAYLOAD/$(PreparePayloadOutDirectoryName)/%(HelixWorkItem.ScenarioDirectoryName)_scd $HELIX_WORKITEM_ROOT/pub</PreCommands>
      <Command>$(Python) test.py sod --scenario-name &quot;%(Identity)&quot;</Command>
    </HelixWorkItem>
  </ItemGroup>

  <!-- SOD build -->
  <ItemGroup>
    <HelixWorkItem Include="@(Scenario -> 'SOD - %(Identity) - Build')">
      <PreCommands Condition="'$(TargetsWindows)' == 'true'">xcopy %HELIX_CORRELATION_PAYLOAD%\$(PreparePayloadOutDirectoryName)\%(HelixWorkItem.ScenarioDirectoryName)_build %HELIX_WORKITEM_ROOT%\bin /E /I /Y</PreCommands>
      <PreCommands Condition="'$(TargetsWindows)' != 'true'">cp -r $HELIX_CORRELATION_PAYLOAD/$(PreparePayloadOutDirectoryName)/%(HelixWorkItem.ScenarioDirectoryName)_build $HELIX_WORKITEM_ROOT/bin</PreCommands>
      <Command>$(Python) test.py sod --scenario-name &quot;%(Identity)&quot;</Command>
    </HelixWorkItem>
  </ItemGroup>


  <Import Project="PreparePayloadWorkItems.targets" />


  <!--
    This is useful for local testing to print the produced helix items
    To use this when you are changing how items are produced, uncomment the target
    and replace the Project item at the top of the file with this:
    <Project DefaultTargets="printItems">
    
    Once you've done that you can run this to see the results:
    dotnet msbuild .\scenarios.proj /v:n
   -->
  <!-- <Target Name="printItems">
        <Message Text="@(HelixWorkItem -> 'name: %(HelixWorkItem.Identity)
     dir: %(HelixWorkItem.PayloadDirectory)
     pre: %(HelixWorkItem.PreCommands)
     command: %(HelixWorkItem.Command)
     post: %(HelixWorkItem.PostCommands)
     timeout: %(HelixWorkItem.Timeout)  '"/>
  </Target> -->

</Project>
