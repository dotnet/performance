parameters:
  osName: ''            # required -- windows | linux | macos
  osVersion: ''         # required -- OS version
  kind: ''              # required -- benchmark kind
  architecture: ''      # required -- Architecture. Allowed values: x64, x86, arm, arm64
  pool: ''              # required -- name of the Helix pool
  queue: ''             # required -- name of the Helix queue
  container: ''         # optional -- id of the container
  channels: []          # required -- list of channels to download .NET from
  projsToGenerate: []    # optional -- String to pass to dotnet new
  machinePool: ''       # required -- Name of perf machine pool (Tiger, Owl, etc)

jobs:
- template: ../common/templates/jobs/jobs.yml
  parameters:
    enableTelemetry: false
    enablePublishBuildArtifacts: false
    helixRepo: dotnet/performance
    jobs:
      - job: '${{ parameters.osName }}_${{ parameters.osVersion }}_${{ parameters.architecture }}_${{ parameters.kind }}_setup'
        displayName: '${{ parameters.osName }} ${{ parameters.osVersion }} ${{ parameters.architecture }} ${{ parameters.kind }} ${{ parameters.machinePool }}'
        timeoutInMinutes: 320
        variables:
        - ${{ if eq(parameters.osName, 'windows') }}:
          - name: ScriptExtension
            value: .cmd
          - name: CorrelationStaging
            value: $(Build.SourcesDirectory)\CorrelationStaging\
          - name: Python
            value: 'py -3'
        - ${{ if ne(parameters.osName, 'windows') }}:
          - name: ScriptExtension
            value: .sh
          - name: CorrelationStaging
            value: $(Build.SourcesDirectory)/CorrelationStaging/
          - name: Python
            value: python3
        workspace:
          clean: all
        pool:
          name: ${{ parameters.pool }}
        container: ${{ parameters.container }}
        strategy:
          matrix:
            ${{ each channel in parameters.channels }}:
              ${{ channel }}:
                _Channel: ${{ channel }}
                _Configs: CompilationMode=Tiered RunKind="${{ parameters.kind }}"
                _BuildConfig: ${{ parameters.architecture }}_$(_Channel)_${{ parameters.kind }} # needs to be unique to avoid logs overwriting in mc.dot.net
        steps:
        - checkout: self
          clean: true
        - script: $(Python) scripts/ci_setup.py --ci --channel $(_Channel) --architecture ${{parameters.architecture}} --perf-hash $(Build.SourceVersion) --queue ${{parameters.queue}} --build-number $(Build.BuildNumber) --build-configs $(_Configs) --output-file $(CorrelationStaging)machine-setup$(ScriptExtension) --install-dir $(CorrelationStaging)dotnet
          displayName: Run ci_setup.py
        - ${{ if eq(parameters.osName, 'windows') }}:
          - script: xcopy .\NuGet.config $(CorrelationStaging) && xcopy .\scripts $(CorrelationStaging)scripts\/e && xcopy .\src\scenarios\shared $(CorrelationStaging)shared\/e && xcopy .\src\scenarios\staticdeps $(CorrelationStaging)staticdeps\/e
            displayName: Copy python libraries and NuGet.config
          - script: $(CorrelationStaging)dotnet\dotnet publish -c Release -o $(CorrelationStaging)startup -f $(_Framework) -r win-${{parameters.architecture}} $(Build.SourcesDirectory)\src\tools\ScenarioMeasurement\Startup\Startup.csproj
            displayName: Build startup tool
            env:
              PERFLAB_TARGET_FRAMEWORKS: $(_Framework)
          - script: $(CorrelationStaging)dotnet\dotnet publish -c Release -o $(CorrelationStaging)SOD -f $(_Framework) -r win-${{parameters.architecture}} $(Build.SourcesDirectory)\src\tools\ScenarioMeasurement\SizeOnDisk\SizeOnDisk.csproj
            displayName: Build SOD tool
            env:
              PERFLAB_TARGET_FRAMEWORKS: $(_Framework)
          - script: $(CorrelationStaging)dotnet\dotnet publish -c Release -o $(CorrelationStaging)FailureReporter -f $(_Framework) -r win-${{parameters.architecture}} $(Build.SourcesDirectory)\src\tools\Reporting\FailureReporting\FailureReporting.csproj
            displayName: Build FailureReporter tool
            env:
              PERFLAB_TARGET_FRAMEWORKS: $(_Framework)
          - ${{ each proj in parameters.projsToGenerate }}:
            - script: $(CorrelationStaging)dotnet\dotnet new ${{proj}} -o $(CorrelationStaging)\app${{proj}}ci
              displayName: Create new project ${{proj}}
        - ${{ if ne(parameters.osName, 'windows') }}:
          - script: cp ./NuGet.config $(CorrelationStaging);cp -r ./scripts $(CorrelationStaging)scripts;cp -r ./src/scenarios/shared $(CorrelationStaging)shared;cp -r ./src/scenarios/staticdeps $(CorrelationStaging)staticdeps
            displayName: Copy python libraries and NuGet.config
          - script: $(CorrelationStaging)dotnet/dotnet publish -c Release -o $(CorrelationStaging)startup -f $(_Framework) -r linux-${{parameters.architecture}} $(Build.SourcesDirectory)/src/tools/ScenarioMeasurement/Startup/Startup.csproj
            displayName: Build startup tool
            env:
              PERFLAB_TARGET_FRAMEWORKS: $(_Framework)
          - script: $(CorrelationStaging)dotnet/dotnet publish -c Release -o $(CorrelationStaging)FailureReporter -f $(_Framework) -r linux-${{parameters.architecture}} $(Build.SourcesDirectory)/src/tools/Reporting/FailureReporting/FailureReporting.csproj
            displayName: Build FailureReporter tool
            env:
              PERFLAB_TARGET_FRAMEWORKS: $(_Framework)
        - task: ArchiveFiles@2
          displayName: 'Zip CI Cold Payload'
          inputs:
            rootFolderOrFile:  '$(CorrelationStaging)'
            archiveFile:       '$(CorrelationStaging)/CorrelationStaging.zip'
            archiveType:       zip
            includeRootFolder: true
            replaceExistingArchive: true
        - task: PublishBuildArtifacts@1
          displayName: Publish CI Cold Payload to Artifacts
          inputs:
            PathtoPublish: '$(CorrelationStaging)/CorrelationStaging.zip'
            PublishLocation: Container
            ArtifactName: CorrelationStaging
          continueOnError: true
          condition: always()