parameters:
  osName: ''            # required -- windows | linux | macos
  osVersion: ''         # required -- OS version
  kind: ''              # required -- benchmark kind
  architecture: ''      # required -- Architecture. Allowed values: x64, x86, arm, arm64
  pool: ''              # required -- name of the Helix pool
  queue: ''             # required -- name of the Helix queue
  container: ''         # optional -- id of the container
  channels: []          # optional (must have dotnetVersionsLinks if not used) -- list of channels to download .NET from
  dotnetVersionsLinks: [] # optional alternative to channels that uses 'channel: link' values to scrape the link's json for dotnet_version or version
  projectFile: ''       # required -- project file to build (current choices: scenarios.proj/sdk_scenarios.proj )
  machinePool: ''       # required -- Name of perf machine pool (Tiger, Owl, etc)
  affinity: '0'         # optional -- Affinity bitmask to a specific machine in the pool as a decimal number (e.g. 1, 2, etc) 
  runEnvVars: []        # optional -- Environment variables to set for the benchmark run in the form of a multi-line object like: "runEnvVars:\n - DOTNET_GCgen0size=1E00000 \n - DOTNET_GCHeapCount=4 \n - DOTNET_GCTotalPhysicalMemory=200000000"
  additionalJobIdentifier: '' # optional -- Additional identifier to append to the job name (no spaces)
  runtimeFlavor: ''     # optional -- Runtime flavor used for scenarios
  hybridGlobalization: false # optional -- Globalization used for scenarios

jobs:
- template: ../common/templates/jobs/jobs.yml
  parameters:
    enableTelemetry: false
    enablePublishBuildArtifacts: true
    helixRepo: dotnet/performance
    jobs:
      - job: '${{ parameters.osName }}_${{ parameters.osVersion }}_${{ parameters.architecture }}_${{ parameters.kind }}_${{ parameters.runtimeFlavor }}_${{ parameters.machinePool }}${{ parameters.additionalJobIdentifier }}'
        displayName: '${{ parameters.osName }} ${{ parameters.osVersion }} ${{ parameters.architecture }} ${{ parameters.kind }} ${{ parameters.runtimeFlavor }} ${{ parameters.machinePool }} ${{ parameters.additionalJobIdentifier }}'
        timeoutInMinutes: 320
        variables:
        - name: hybridGlobalizationParam
          ${{ if eq(parameters.hybridGlobalization, 'true')}}:
            value: '--hybrid-globalization'
          ${{ if ne(parameters.hybridGlobalization, 'true')}}:
            value: ''
        - name: runtimeFlavorParam
          ${{ if ne(parameters.runtimeFlavor, '')}}:
            value: --runtime-flavor ${{ parameters.runtimeFlavor }}
          ${{ if eq(parameters.runtimeFlavor, '')}}:
            value: ''
        - name: runEnvVarsParam
          ${{ if ne(length(parameters.runEnvVars), 0)}}: # if no runEnvVars are specified, don't pass the parameter to ci_setup
            value: "--run-env-vars ${{ join(' ', parameters.runEnvVars)}}"
          ${{ if eq(length(parameters.runEnvVars), 0)}}:
            value: ''
        - name: Python
          ${{ if eq(parameters.osName, 'windows') }}:
            value: 'py -3'
          ${{ if ne(parameters.osName, 'windows') }}:
            value: 'python3'
        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
          - name: internalParam
            value: "--internal"
          - ${{ if and(eq(parameters.osName, 'windows'), ne(parameters.architecture, 'x86')) }}:
            - name: PdnPathParameter
              value: '--pdn-path "$(Build.ArtifactStagingDirectory)\\PDN.zip"'
          - ${{ else }}:
            - name: PdnPathParameter
              value: ''
          - group: DotNet-HelixApi-Access
          - group: dotnet-benchview
        - ${{ if not(and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'))) }}:
          - name: internalParam
            value: ''
          - name: PdnPathParameter
            value: ''
        workspace:
          clean: all
        pool: ${{ parameters.pool }}
        container: ${{ parameters.container }}
        strategy:
          matrix:
            ${{ if ne(length(parameters.channels), 0) }}:
              ${{ each channel in parameters.channels }}:
                ${{ channel }}:
                  _Channel: ${{ channel }}
                  _DotnetVersionParam: ''
            ${{ if ne(length(parameters.dotnetVersionsLinks), 0) }}:
              ${{ each versionPair in parameters.dotnetVersionsLinks }}:
                ${{ versionPair.key }}_Link:
                  _Channel: ${{ versionPair.key }}
                  _DotnetVersionParam: --dotnet-version-link ${{ versionPair.value }}
        steps:
        - checkout: self
          clean: true
        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
          - task: AzureCLI@2
            condition: ne(variables.PdnPathParameter, '')
            displayName: 'Download PDN'
            inputs:
              azureSubscription: '.NET Performance (790c4451-dad9-4fda-af8b-10bd9ca328fa)'
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az storage blob download --auth-mode login --account-name pvscmdupload --container-name assets --name paint.net.5.0.3.portable.${{ parameters.architecture }}.zip --file $(Build.ArtifactStagingDirectory)/PDN.zip 
        - script: $(Python) scripts/run_performance_job.py --performance-repo-ci --is-scenario --queue ${{ parameters.queue }} --channel $(_Channel) --architecture ${{ parameters.architecture }} --run-kind ${{ parameters.kind }} --affinity ${{ parameters.affinity }} $(runEnvVarsParam) --os-group ${{ parameters.osName }} $(runtimeFlavorParam) $(hybridGlobalizationParam) $(PdnPathParameter) --os-version ${{ parameters.osVersion }} $(_DotnetVersionParam) $(internalParam) --project-file $(Build.SourcesDirectory)/eng/performance/${{ parameters.projectFile }}
          displayName: Run run_performance_job.py
          env:
            HelixAccessToken: '$(HelixApiAccessToken)'
            PerfCommandUploadToken: '$(PerfCommandUploadToken)'
            PerfCommandUploadTokenLinux: '$(PerfCommandUploadTokenLinux)'
        - template: /eng/performance/send-to-helix.yml
          parameters:
            ProjectFile: ${{ parameters.projectFile }}
