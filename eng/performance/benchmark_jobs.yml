parameters:
  osName: ''            # required -- windows | linux | macos
  osVersion: ''         # required -- OS version
  kind: ''              # required -- benchmark kind. As of today, only "micro" and "mlnet" benchmarks are supported, we plan to add "scenarios" soon
  architecture: ''      # required -- Architecture. Allowed values: x64, x86, arm, arm64
  pool: ''              # required -- name of the Helix pool
  queue: ''             # required -- name of the Helix queue
  container: ''         # optional -- id of the container
  csproj: ''            # required -- relative path to csproj with benchmarks
  channels: []          # required -- list of channels to download .NET from
  runCategories: ''     # required -- string of space separated categories supplied to benchmark dotnet

jobs:
- template: ../common/templates/jobs/jobs.yml
  parameters:
    enableTelemetry: false
    enablePublishBuildArtifacts: true
    helixRepo: dotnet/performance
    jobs:
      - job: '${{ parameters.osName }}_${{ parameters.osVersion }}_${{ parameters.architecture }}_${{ parameters.kind }}'
        displayName: '${{ parameters.osName }} ${{ parameters.osVersion }} ${{ parameters.architecture }} ${{ parameters.kind }}'
        timeoutInMinutes: 320
        variables:
        - ${{ if eq(parameters.osName, 'windows') }}:
          - name: CliArguments
            value: '--dotnet-versions %DOTNET_VERSION% --cli-source-info args --cli-branch %PERFLAB_BRANCH% --cli-commit-sha %PERFLAB_HASH% --cli-repository https://github.com/%PERFLAB_REPO% --cli-source-timestamp %PERFLAB_BUILDTIMESTAMP%'
          - name: AdditionalHelixPreCommands
            value: 'call %HELIX_CORRELATION_PAYLOAD%\tools\machine-setup.cmd'
          - name: Python
            value: 'py -3'
          - ${{ if ne(parameters.osVersion, 'RS1')}}:
            - name: ArtifactsDirectory
              value: '%HELIX_WORKITEM_UPLOAD_ROOT%\BenchmarkDotNet.Artifacts'
          - ${{ if eq(parameters.osVersion, 'RS1')}}:
            - name: ArtifactsDirectory
              value: '%HELIX_CORRELATION_PAYLOAD%\artifacts\BenchmarkDotNet.Artifacts'
        - ${{ if ne(parameters.osName, 'windows') }}:
          - name: CliArguments
            value: '--dotnet-versions $DOTNET_VERSION --cli-source-info args --cli-branch $PERFLAB_BRANCH --cli-commit-sha $PERFLAB_HASH --cli-repository https://github.com/$PERFLAB_REPO --cli-source-timestamp $PERFLAB_BUILDTIMESTAMP'
          - name: AdditionalHelixPreCommands
            value: 'chmod +x ./tools/machine-setup.sh;. ./tools/machine-setup.sh'
          - name: Python
            value: python3
          - ${{ if eq(parameters.osVersion, '1804')}}:
            - name: ArtifactsDirectory
              value: '$HELIX_WORKITEM_UPLOAD_ROOT/BenchmarkDotNet.Artifacts'
          - ${{ if or(eq(parameters.osVersion, '1604'), eq(parameters.architecture, 'arm64'))}}:
            - name: ArtifactsDirectory
              value: '$HELIX_WORKITEM_PAYLOAD/artifacts/BenchmarkDotNet.Artifacts'
        - ${{ if eq(variables['System.TeamProject'], 'public') }}:
          # for public runs, we do not want to upload perflab data
          - name: PerfLabArguments
            value: ''
          - name: Creator
            value: dotnet-performance
          # for public runs we want to run the benchmarks exactly once, no warmup, no pilot, no overhead
          - name: BenchmarkDotNetArguments
            value: '--anyCategories ${{ parameters.runCategories }} --iterationCount 1 --warmupCount 0 --invocationCount 1 --unrollFactor 1 --strategy ColdStart --stopOnFirstError true'
          - name: HelixApiAccessToken
            value: ''
          - name: HelixPreCommand
            value: '$(AdditionalHelixPreCommands)'
          - name: HelixSourcePrefix
            value: "pr"
        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
          # for private runs, we want to upload perflab data
          - name: PerfLabArguments
            value: '--upload-to-perflab-container'
          # for private runs we don't provide any custom BDN arguments (the ones from Program.Main are used)
          - name: BenchmarkDotNetArguments
            value: '--anyCategories ${{ parameters.runCategories }}'
          - name: Creator
            value: ''
          - name: HelixSourcePrefix
            value: 'official'
          - ${{ if eq(parameters.osName, 'windows') }}:
            - name: HelixPreCommand
              value: 'py -3 -m venv %HELIX_WORKITEM_PAYLOAD%\.venv;call %HELIX_WORKITEM_PAYLOAD%\.venv\Scripts\activate.bat;set PYTHONPATH=;py -3 -m pip install --user azure.storage.blob==12.0.0 --force-reinstall;py -3 -m pip install --user azure.storage.queue==12.0.0 --force-reinstall;set "PERFLAB_UPLOAD_TOKEN=$(PerfCommandUploadToken)";$(AdditionalHelixPreCommands)'
          - ${{ if ne(parameters.osName, 'windows') }}:
            - name: HelixPreCommand
              value: 'sudo apt-get -y install python3-venv;python3 -m venv $HELIX_WORKITEM_PAYLOAD/.venv;source $HELIX_WORKITEM_PAYLOAD/.venv/Scripts/activate;export PYTHONPATH=;pip3 install --user azure.storage.blob==12.0.0 --force-reinstall;pip3 install --user azure.storage.queue==12.0.0 --force-reinstall;export PERFLAB_UPLOAD_TOKEN="$(PerfCommandUploadTokenLinux)";$(AdditionalHelixPreCommands)'

          - group: DotNet-HelixApi-Access
          # perflab upload tokens still exist in this variable group
          - group: dotnet-benchview
        workspace:
          clean: all
        pool:
          name: ${{ parameters.pool }}
        container: ${{ parameters.container }}
        strategy:
          matrix:
            ${{ each channel in parameters.channels }}:
              ${{ channel }}:
                _Channel: ${{ channel }}
                _Configs: CompilationMode=Tiered RunKind="${{ parameters.kind }}"
                _PerfLabArguments: $(PerfLabArguments)
                _BuildConfig: ${{ parameters.architecture }}_$(_Channel)_${{ parameters.kind }} # needs to be unique to avoid logs overwriting in mc.dot.net
        steps:
        - checkout: self
          clean: true
        - script: $(Python) scripts/ci_setup.py --channel $(_Channel) --architecture ${{parameters.architecture}} --perf-hash $(Build.SourceVersion) --queue ${{parameters.queue}} --build-number $(Build.BuildNumber) --build-configs $(_Configs)
          displayName: Run ci_setup.py
        - ${{ if eq(parameters.osName, 'windows') }}:
          - script: (robocopy $(Build.SourcesDirectory) $(Build.SourcesDirectory)\notLocked /E /XD $(Build.SourcesDirectory)\notLocked $(Build.SourcesDirectory)\artifacts $(Build.SourcesDirectory)\.git) ^& IF %ERRORLEVEL% LEQ 1 exit 0
            displayName: Workaround to avoid locked file # https://github.com/dotnet/arcade/issues/2125
        - template: /eng/performance/send-to-helix.yml
          parameters:
            HelixSource: '$(HelixSourcePrefix)/dotnet/performance/$(Build.SourceBranch)' # sources must start with pr/, official/, prodcon/, or agent/
            HelixType: 'test/performance_$(_BuildConfig)/'
            HelixAccessToken: $(HelixApiAccessToken)
            HelixTargetQueues: ${{ parameters.queue }}
            HelixPreCommands: $(HelixPreCommand)
            Creator: $(Creator)
            Architecture: ${{ parameters.architecture }}
            TargetCsproj: ${{ parameters.csproj }}
            WorkItemTimeout: 4:00 # 4 hours
            Python: $(Python)
            ${{ if eq(parameters.osName, 'windows') }}:
              WorkItemDirectory: '$(Build.SourcesDirectory)\docs' # WorkItemDirectory can not be empty, so we send it some docs to keep it happy
              CorrelationPayloadDirectory: '$(Build.SourcesDirectory)\notLocked' # it gets checked out to a folder with shorter path than WorkItemDirectory so we can avoid file name too long exceptions
            ${{ if ne(parameters.osName, 'windows') }}:
              WorkItemDirectory: '$(Build.SourcesDirectory)'