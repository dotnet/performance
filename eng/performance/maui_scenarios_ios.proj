<Project Sdk="Microsoft.DotNet.Helix.Sdk" DefaultTargets="Test">
  <Import Project="Scenarios.Common.props" />

  <PropertyGroup>
    <IncludeXHarnessCli>true</IncludeXHarnessCli>
    <MicrosoftDotNetXHarnessCLIVersion>9.0.0-prerelease.23606.1</MicrosoftDotNetXHarnessCLIVersion>
  </PropertyGroup>

  <PropertyGroup>
    <AfterPreparePayloadWorkItemCommand>$(Python) post.py</AfterPreparePayloadWorkItemCommand>
    <PreparePayloadOutDirectoryName>scenarios_out</PreparePayloadOutDirectoryName>
    <PreparePayloadWorkItemBaseDirectory Condition="'$(TargetsWindows)' == 'true'">$(CorrelationPayloadDirectory)$(PreparePayloadOutDirectoryName)\</PreparePayloadWorkItemBaseDirectory>
    <PreparePayloadWorkItemBaseDirectory Condition="'$(TargetsWindows)' != 'true'">$(CorrelationPayloadDirectory)$(PreparePayloadOutDirectoryName)/</PreparePayloadWorkItemBaseDirectory>
    
    <NativeAOTCommandProps Condition="'$(RuntimeFlavor)' == 'coreclr'">--nativeaot true</NativeAOTCommandProps>
    <!-- For non-default configurations, add the configuration to the name of the test (in the matching format), otherwise didn't add anything.
    This will ensure that PowerBI's using the test name rather than the run configuration for the data continue to work properly and defaults are connected -->
    <RunConfigsString>$(RuntimeFlavor)</RunConfigsString>
  </PropertyGroup>

  <Target Name="RemoveDotnetFromCorrelationStaging" BeforeTargets="BeforeTest">
    <Message Text="Removing Dotnet Packs from Correlation Staging" Importance="high" />
    <RemoveDir Directories="$(CorrelationPayloadDirectory)dotnet\packs" />
  </Target>

  <ItemDefinitionGroup>
    <HelixWorkItem>
      <Timeout>00:30</Timeout>
    </HelixWorkItem>
  </ItemDefinitionGroup>

  <ItemGroup>
    <MAUIiOSScenario Include=".NET iOS Default $(RunConfigsString)">
      <ScenarioDirectoryName>netios</ScenarioDirectoryName>
      <PayloadDirectory>$(ScenariosDir)%(ScenarioDirectoryName)</PayloadDirectory>
      <IPAName>NetiOSDefault</IPAName>
      <PackageName>com.companyname.NetiOSDefault</PackageName>
    </MAUIiOSScenario>
    <MAUIiOSScenario Include="Maui iOS Default $(RunConfigsString)">
      <ScenarioDirectoryName>mauiios</ScenarioDirectoryName>
      <PayloadDirectory>$(ScenariosDir)%(ScenarioDirectoryName)</PayloadDirectory>
      <IPAName>MauiiOSDefault</IPAName>
      <PackageName>net.dot.mauitesting</PackageName>
    </MAUIiOSScenario>
    <MAUIiOSScenario Include="Maui Blazor iOS Default $(RunConfigsString)">
      <ScenarioDirectoryName>mauiblazorios</ScenarioDirectoryName>
      <PayloadDirectory>$(ScenariosDir)%(ScenarioDirectoryName)</PayloadDirectory>
      <IPAName>MauiBlazoriOSDefault</IPAName>
      <PackageName>net.dot.mauiblazortesting</PackageName>
    </MAUIiOSScenario>
    <!-- Temporarily disabled per: https://github.com/dotnet/performance/issues/3767 -->
    <!-- <MAUIiOSScenario Include="Maui iOS Podcast $(RunConfigsString)">
      <ScenarioDirectoryName>mauiiospodcast</ScenarioDirectoryName>
      <PayloadDirectory>$(ScenariosDir)%(ScenarioDirectoryName)</PayloadDirectory>
      <IPAName>Microsoft.NetConf2021.Maui</IPAName>
      <PackageName>net.dot.netconf2021.maui</PackageName>
    </MAUIiOSScenario> -->
  </ItemGroup>

  <ItemGroup>
    <PreparePayloadWorkItem Include="@(MAUIiOSScenario)">
      <Command>sudo xcode-select -s /Applications/Xcode_15.0.app; $(Python) pre.py publish -f $(PERFLAB_Framework)-ios --self-contained -c Release -r ios-arm64 $(NativeAOTCommandProps) -o $(PreparePayloadWorkItemBaseDirectory)%(PreparePayloadWorkItem.ScenarioDirectoryName); cd ../; zip -r %(PreparePayloadWorkItem.ScenarioDirectoryName).zip %(PreparePayloadWorkItem.ScenarioDirectoryName)</Command>
      <WorkingDirectory>%(PreparePayloadWorkItem.PayloadDirectory)</WorkingDirectory>
    </PreparePayloadWorkItem>
  </ItemGroup>

  <ItemGroup>
    <HelixWorkItem Include="@(MAUIiOSScenario -> 'SOD - %(Identity) IPA Size')">
      <PreCommands>cp -r $HELIX_CORRELATION_PAYLOAD/$(PreparePayloadOutDirectoryName)/%(HelixWorkItem.ScenarioDirectoryName) $HELIX_WORKITEM_ROOT/pub</PreCommands>
      <Command>$(Python) test.py sod --scenario-name &quot;%(Identity)&quot;</Command>
    </HelixWorkItem>
    <HelixWorkItem Include="@(MAUIiOSScenario -> 'SOD - %(Identity) Unzipped')">
      <PreCommands>cp -r $HELIX_CORRELATION_PAYLOAD/$(PreparePayloadOutDirectoryName)/%(HelixWorkItem.ScenarioDirectoryName) $HELIX_WORKITEM_ROOT/pub; mv $HELIX_WORKITEM_ROOT/pub/%(HelixWorkItem.IPAName).ipa $HELIX_WORKITEM_ROOT/pub/%(HelixWorkItem.IPAName).zip; unzip -d $HELIX_WORKITEM_ROOT/pub $HELIX_WORKITEM_ROOT/pub/%(HelixWorkItem.IPAName).zip; rm $HELIX_WORKITEM_ROOT/pub/%(HelixWorkItem.IPAName).zip</PreCommands>
      <Command>$(Python) test.py sod --scenario-name &quot;%(Identity)&quot;</Command>
    </HelixWorkItem>
    <XHarnessAppBundleToTest Include="Device Startup - iOS .NET Default $(RunConfigsString)">
      <AppBundlePath>$(ScenariosDir)netios.zip</AppBundlePath>
      <WorkItemTimeout>00:15:00</WorkItemTimeout>
      <TestTarget>ios-device</TestTarget>
      <CustomCommands>
        <![CDATA[
            # PreCommands
            export XHARNESSPATH=$XHARNESS_CLI_PATH

            cp -v $HELIX_CORRELATION_PAYLOAD/$(PreparePayloadOutDirectoryName)/netios/NetiOSDefault.ipa $HELIX_WORKITEM_ROOT/netios/NetiOSDefault.zip
            mkdir $HELIX_WORKITEM_ROOT/netios/pub
            cp -v $HELIX_CORRELATION_PAYLOAD/$(PreparePayloadOutDirectoryName)/netios/versions.json $HELIX_WORKITEM_ROOT/netios/pub/versions.json
            unzip -d $HELIX_WORKITEM_ROOT/netios $HELIX_WORKITEM_ROOT/netios/NetiOSDefault.zip
            mv $HELIX_WORKITEM_ROOT/netios/Payload/NetiOSDefault.app $HELIX_WORKITEM_ROOT/netios/NetiOSDefault.app
            cp -f embedded.mobileprovision $HELIX_WORKITEM_ROOT/netios/NetiOSDefault.app
            cd $HELIX_WORKITEM_ROOT/netios
            sign NetiOSDefault.app

            # Testing commands
            $(Python) test.py devicestartup --device-type ios --package-path NetiOSDefault.app --package-name com.companyname.NetiOSDefault --scenario-name "%(Identity)"
            ((result=$?))

            # Post commands
            $(Python) post.py
            exit $result
          ]]>
        </CustomCommands>
    </XHarnessAppBundleToTest>
    <XHarnessAppBundleToTest Include="Device Startup - iOS Maui Default $(RunConfigsString)">
      <AppBundlePath>$(ScenariosDir)mauiios.zip</AppBundlePath>
      <WorkItemTimeout>00:15:00</WorkItemTimeout>
      <TestTarget>ios-device</TestTarget>
      <CustomCommands>
        <![CDATA[
            # PreCommands
            export XHARNESSPATH=$XHARNESS_CLI_PATH
            
            cp -v $HELIX_CORRELATION_PAYLOAD/$(PreparePayloadOutDirectoryName)/mauiios/MauiiOSDefault.ipa $HELIX_WORKITEM_ROOT/mauiios/MauiiOSDefault.zip
            mkdir $HELIX_WORKITEM_ROOT/mauiios/pub
            cp -v $HELIX_CORRELATION_PAYLOAD/$(PreparePayloadOutDirectoryName)/mauiios/versions.json $HELIX_WORKITEM_ROOT/mauiios/pub/versions.json
            unzip -d $HELIX_WORKITEM_ROOT/mauiios $HELIX_WORKITEM_ROOT/mauiios/MauiiOSDefault.zip
            mv $HELIX_WORKITEM_ROOT/mauiios/Payload/MauiiOSDefault.app $HELIX_WORKITEM_ROOT/mauiios/MauiiOSDefault.app
            cp -f embedded.mobileprovision $HELIX_WORKITEM_ROOT/mauiios/MauiiOSDefault.app
            cd $HELIX_WORKITEM_ROOT/mauiios
            sign MauiiOSDefault.app

            # Testing commands
            $(Python) test.py devicestartup --device-type ios --package-path MauiiOSDefault.app --package-name net.dot.mauitesting --scenario-name "%(Identity)"
            ((result=$?))

            # Post commands
            $(Python) post.py
            exit $result
          ]]>
        </CustomCommands>
    </XHarnessAppBundleToTest>
    <!-- Now also disabled for normal mono runs. (Reenable for mono and native aot once fixed). Tracking issue: https://github.com/dotnet/performance/issues/3148 -->
    <!-- <XHarnessAppBundleToTest Condition="'$(RuntimeFlavor)' == 'mono'" Include="Device Startup - iOS Maui Blazor Default $(RunConfigsString)">
      <AppBundlePath>$(ScenariosDir)mauiblazorios.zip</AppBundlePath>
      <WorkItemTimeout>00:15:00</WorkItemTimeout>
      <TestTarget>ios-device</TestTarget>
      <CustomCommands>
        <![CDATA[
          # PreCommands
          export XHARNESSPATH=$XHARNESS_CLI_PATH

          cp -v $HELIX_CORRELATION_PAYLOAD/$(PreparePayloadOutDirectoryName)/mauiblazorios/MauiBlazoriOSDefault.ipa $HELIX_WORKITEM_ROOT/mauiblazorios/MauiBlazoriOSDefault.zip
          mkdir $HELIX_WORKITEM_ROOT/mauiblazorios/pub
          cp -v $HELIX_CORRELATION_PAYLOAD/$(PreparePayloadOutDirectoryName)/mauiblazorios/versions.json $HELIX_WORKITEM_ROOT/mauiblazorios/pub/versions.json
          unzip -d $HELIX_WORKITEM_ROOT/mauiblazorios $HELIX_WORKITEM_ROOT/mauiblazorios/MauiBlazoriOSDefault.zip
          mv $HELIX_WORKITEM_ROOT/mauiblazorios/Payload/MauiBlazoriOSDefault.app $HELIX_WORKITEM_ROOT/mauiblazorios/MauiBlazoriOSDefault.app
          cp -f embedded.mobileprovision $HELIX_WORKITEM_ROOT/mauiblazorios/MauiBlazoriOSDefault.app
          cd $HELIX_WORKITEM_ROOT/mauiblazorios
          sign MauiBlazoriOSDefault.app

          # Testing commands
          $(Python) test.py devicestartup -1-device-type ios -1-package-path MauiBlazoriOSDefault.app -1-package-name net.dot.mauiblazortesting -1-scenario-name "%(Identity)" -1-use-fully-drawn-time -1-fully-drawn-magic-string __MAUI_Blazor_WebView_OnAfterRender__ -1-startup-iterations 5
          ((result=$?))

          # Post commands
          $(Python) post.py
          exit $result
        ]]>
      </CustomCommands>
    </XHarnessAppBundleToTest> -->
    <!-- Temporarily disabled per: https://github.com/dotnet/performance/issues/3767 -->
    <!-- <XHarnessAppBundleToTest Include="Device Startup - iOS Maui Podcast $(RunConfigsString)">
      <AppBundlePath>$(ScenariosDir)mauiiospodcast.zip</AppBundlePath>
      <WorkItemTimeout>00:15:00</WorkItemTimeout>
      <TestTarget>ios-device</TestTarget>
      <CustomCommands>
        <![CDATA[
          # PreCommands
          export XHARNESSPATH=$XHARNESS_CLI_PATH

          cp -v $HELIX_CORRELATION_PAYLOAD/$(PreparePayloadOutDirectoryName)/mauiiospodcast/Microsoft.NetConf2021.Maui.ipa $HELIX_WORKITEM_ROOT/mauiiospodcast/Microsoft.NetConf2021.Maui.zip
          mkdir $HELIX_WORKITEM_ROOT/mauiiospodcast/pub
          cp -v $HELIX_CORRELATION_PAYLOAD/$(PreparePayloadOutDirectoryName)/mauiiospodcast/versions.json $HELIX_WORKITEM_ROOT/mauiiospodcast/pub/versions.json
          unzip -d $HELIX_WORKITEM_ROOT/mauiiospodcast $HELIX_WORKITEM_ROOT/mauiiospodcast/Microsoft.NetConf2021.Maui.zip
          mv $HELIX_WORKITEM_ROOT/mauiiospodcast/Payload/Microsoft.NetConf2021.Maui.app $HELIX_WORKITEM_ROOT/mauiiospodcast/Microsoft.NetConf2021.Maui.app
          cp -f embedded.mobileprovision $HELIX_WORKITEM_ROOT/mauiiospodcast/Microsoft.NetConf2021.Maui.app
          cd $HELIX_WORKITEM_ROOT/mauiiospodcast
          sign Microsoft.NetConf2021.Maui.app

          # Testing commands
          $(Python) test.py devicestartup -1-device-type ios -1-package-path Microsoft.NetConf2021.Maui.app -1-package-name net.dot.netconf2021.maui -1-scenario-name "%(Identity)"
          ((result=$?))

          # Post commands
          $(Python) post.py
          exit $result
        ]]>
      </CustomCommands>
    </XHarnessAppBundleToTest> -->
  </ItemGroup>


  <!--
    This target is to work around the XHarness command that depend on scripts in ORIGPYPATH
    being run before we get to run our normal Post commands. AddXHarnessCLI is the XHarness
    Target so we just make sure we add this after that.
  -->
  <Target Name="ResetPYTHONPATHBeforeXHarnessCommand" AfterTargets="AddXHarnessCLI">
    <PropertyGroup>
      <HelixPostCommands>export PYTHONPATH=$ORIGPYPATH;$(HelixPostCommands)</HelixPostCommands>
    </PropertyGroup>
  </Target>

  <Import Project="PreparePayloadWorkItems.targets" />
</Project>
