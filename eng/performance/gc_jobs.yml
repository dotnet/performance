parameters:
  osName: ''            # required -- windows | linux | macos
  osVersion: ''         # required -- OS version
  kind: ''              # required -- benchmark kind. As of today, only "micro" and "mlnet" benchmarks are supported, we plan to add "scenarios" soon
  architecture: ''      # required -- Architecture. Allowed values: x64, x86, arm, arm64
  pool: ''              # required -- name of the Helix pool
  queue: ''             # required -- name of the Helix queue
  container: ''         # optional -- id of the container

jobs:
- template: ../common/templates/jobs/jobs.yml
  parameters:
    enableTelemetry: false
    enablePublishBuildArtifacts: true
    helixRepo: dotnet/performance
    jobs:
      - job: '${{ parameters.osName }}_${{ parameters.osVersion }}_${{ parameters.architecture }}_${{ parameters.kind }}'
        displayName: '${{ parameters.osName }} ${{ parameters.osVersion }} ${{ parameters.architecture }} ${{ parameters.kind }}'
        timeoutInMinutes: 320
        variables:
          - name: Python
            value: 'py -3'
          - group: DotNet-HelixApi-Access
        workspace:
          clean: all
        pool:
          name: ${{ parameters.pool }}
        container: ${{ parameters.container }}

        steps:
        - checkout: self
          clean: true
        - script: $(Python) scripts/gcinfra_setup.py
          displayName: Set up GCPerf, GCPerfSim, and C Tools

        #Your steps here

        # - template: /eng/performance/send-to-helix.yml
        #   parameters:
        #     HelixSource: '$(HelixSourcePrefix)/dotnet/performance/$(Build.SourceBranch)' # Need to update this
        #     HelixType: 'test/performance_$(_BuildConfig)/' #Need to update this
        #     HelixAccessToken: $(HelixApiAccessToken)
        #     HelixTargetQueues: ${{ parameters.queue }}
        #     HelixPreCommands: $(HelixPreCommand)
        #     Creator: $(Creator)
        #     Architecture: ${{ parameters.architecture }}
        #     TargetCsproj: ${{ parameters.csproj }}
        #     WorkItemTimeout: 4:00 # 4 hours
        #     Python: $(Python)
        #     ${{ if eq(parameters.osName, 'windows') }}:
        #       WorkItemDirectory: '$(Build.SourcesDirectory)\docs' # Need to update this
        #       CorrelationPayloadDirectory: '$(Build.SourcesDirectory)\notLocked' # Need to update this
