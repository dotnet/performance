resources:
  containers:
    - container: ubuntu_x64_build_container
      image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04
    - container: centos_x64_build_container
      image: mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7

# CI Trigger on release/7.0 branch
trigger:
  branches:
    include:
    - release/7.0
  paths:
    include:
    - eng/Version.Details.xml

# Trigger builds for PR's targeting release/7.0
pr:
  branches:
    include:
    - release/7.0
  paths:
    exclude: # don't trigger the CI if only a doc file was changed
    - docs/*
    - eng/common/README.md
    - src/benchmarks/micro/Serializers/README.md
    - src/benchmarks/micro/README.md
    - src/benchmarks/real-world/JitBench/README.md
    - src/benchmarks/real-world/Microsoft.ML.Benchmarks/Input/README.md
    - src/tools/ResultsComparer/README.md
    - scripts/benchmarks_monthly.py
    - README.md

schedules:
  - cron: "0 */12 * * *"
    displayName: Every 12 hours build
    branches:
      include:
      - release/7.0
    always: true

jobs:

######################################################
# Public correctness jobs
######################################################

- ${{ if eq(variables['System.TeamProject'], 'public') }}:
  # Windows x64 scenario benchmarks
  - template: /eng/performance/scenarios.yml
    parameters:
      osName: windows
      osVersion: 21H1
      architecture: x64
      pool:
        vmImage: windows-2019
      kind: scenarios
      machinePool: Open
      queue: Windows.10.Amd64.Client21H1.Open
      projectFile: scenarios.proj
      channels: # for public jobs we want to make sure that the PRs don't break any of the supported frameworks
        - release/7.0

  # Ubuntu 1804 x64 scenario benchmarks
  - template: /eng/performance/scenarios.yml
    parameters:
      osName: ubuntu
      osVersion: 1804
      kind: scenarios
      architecture: x64
      pool: 
        vmImage: ubuntu-latest
      machinePool: Open
      queue: Ubuntu.1804.Amd64.Open
      container: ubuntu_x64_build_container
      projectFile: scenarios.proj
      channels:
        - release/7.0
  
    # Windows x64 MAUI scenario benchmarks
  - template: /eng/performance/scenarios.yml
    parameters:
      osName: windows
      osVersion: 21H1
      architecture: x64
      pool:
        vmImage: windows-2019
      kind: maui_scenarios
      machinePool: Open
      queue: Windows.10.Amd64.Client21H1.Open
      projectFile: maui_scenarios.proj
      channels: # for public jobs we want to make sure that the PRs don't break any of the supported frameworks
        - release/7.0

  # # Ubuntu 1804 x64 MAUI scenario benchmarks
  # - template: /eng/performance/scenarios.yml
  #   parameters:
  #     osName: ubuntu
  #     osVersion: 1804
  #     kind: maui_scenarios
  #     architecture: x64
  #     pool: 
  #       vmImage: ubuntu-latest
  #     machinePool: Open
  #     queue: Ubuntu.1804.Amd64.Open
  #     container: ubuntu_x64_build_container
  #     projectFile: maui_scenarios.proj
  #     channels:
  #       - release/7.0

  # Windows x64 Blazor scenario benchmarks
  - template: /eng/performance/scenarios.yml
    parameters:
      osName: windows
      osVersion: 21H1
      architecture: x64
      pool:
        vmImage: windows-2019
      kind: blazor_scenarios
      machinePool: Open
      queue: Windows.10.Amd64.Client21H1.Open
      projectFile: blazor_scenarios.proj
      channels:
        - release/7.0

  # Windows x64 SDK scenario benchmarks
  - template: /eng/performance/scenarios.yml
    parameters:
      osName: windows
      osVersion: 21H1
      architecture: x64
      pool:
        vmImage: windows-2019
      kind: sdk_scenarios
      machinePool: Open
      queue: Windows.10.Amd64.Client21H1.Open
      projectFile: sdk_scenarios.proj
      channels:
        - release/7.0
  
  # Ubuntu 1804 x64 SDK scenario benchmarks
  - template: /eng/performance/scenarios.yml
    parameters:
      osName: ubuntu
      osVersion: 1804
      kind: sdk_scenarios
      architecture: x64
      pool: 
        vmImage: ubuntu-latest
      machinePool: Open
      queue: Ubuntu.1804.Amd64.Open
      container: ubuntu_x64_build_container
      projectFile: sdk_scenarios.proj
      channels:
        - release/7.0

  # Windows x86 SDK scenario benchmarks
  - template: /eng/performance/scenarios.yml
    parameters:
      osName: windows
      osVersion: 21H1
      architecture: x86
      pool:
        vmImage: windows-2019
      kind: sdk_scenarios
      machinePool: Open
      queue: Windows.10.Amd64.Client21H1.Open
      projectFile: sdk_scenarios.proj
      channels:
        - release/7.0
  
  # Windows x64 micro benchmarks
  - template: /eng/performance/benchmark_jobs.yml
    parameters:
      osName: windows
      osVersion: 21H1
      kind: micro
      architecture: x64
      pool:
        vmImage: windows-2019
      machinePool: Open
      queue: Windows.10.Amd64.Client21H1.Open
      csproj: src\benchmarks\micro\MicroBenchmarks.csproj
      runCategories: 'runtime libraries' 
      channels:
        - release/7.0

  # # Windows x64 net461 micro benchmarks
  # - template: /eng/performance/benchmark_jobs.yml
  #   parameters:
  #     osName: windows
  #     osVersion: RS5
  #     kind: micro_net461
  #     architecture: x64
  #     pool:
  #       vmImage: windows-2019
  #     machinePool: Open
  #     queue: Windows.10.Amd64.ClientRS5.Open
  #     csproj: src\benchmarks\micro\MicroBenchmarks.csproj
  #     runCategories: 'runtime libraries'
  #     channels: # for public jobs we want to make sure that the PRs don't break any of the supported frameworks
  #       - LTS # use LTS channel for net461 framework

  # Windows x86 micro benchmarks
  - template: /eng/performance/benchmark_jobs.yml
    parameters:
      osName: windows
      osVersion: 21H1
      kind: micro
      architecture: x86
      pool:
        vmImage: windows-2019
      machinePool: Open
      queue: Windows.10.Amd64.Client21H1.Open
      csproj: src\benchmarks\micro\MicroBenchmarks.csproj
      runCategories: 'runtime libraries'
      channels: # for public jobs we want to make sure that the PRs don't break x86
        - release/7.0

  # Windows x64 ML.NET benchmarks
  - template: /eng/performance/benchmark_jobs.yml
    parameters:
      osName: windows
      osVersion: 21H1
      kind: mlnet
      architecture: x64
      pool:
        vmImage: windows-2019
      machinePool: Open
      queue: Windows.10.Amd64.Client21H1.Open
      csproj: src\benchmarks\real-world\Microsoft.ML.Benchmarks\Microsoft.ML.Benchmarks.csproj
      runCategories: 'mldotnet'
      channels: # for ML.NET jobs we want to check .NET Core 3.1 and 5.0 only
        - release/7.0

  # Windows x64 F# benchmarks
  - template: /eng/performance/benchmark_jobs.yml
    parameters:
      osName: windows
      osVersion: 21H1
      kind: fsharp
      architecture: x64
      pool:
        vmImage: windows-2019
      machinePool: Open
      queue: Windows.10.Amd64.Client21H1.Open
      csproj: src\benchmarks\real-world\FSharp\FSharp.fsproj
      runCategories: 'fsharp'
      channels:
        - release/7.0

  # Windows x64 Roslyn benchmarks
  - template: /eng/performance/benchmark_jobs.yml
    parameters:
      osName: windows
      osVersion: 21H1
      kind: roslyn
      architecture: x64
      pool:
        vmImage: windows-2019
      machinePool: Open
      queue: Windows.10.Amd64.Client21H1.Open
      csproj: src\benchmarks\real-world\Roslyn\CompilerBenchmarks.csproj
      runCategories: 'roslyn'
      channels: # for Roslyn jobs we want to check .NET Core 3.1 and 5.0 only
        - release/7.0
        
  # Ubuntu 1804 x64 micro benchmarks
  - template: /eng/performance/benchmark_jobs.yml
    parameters:
      osName: ubuntu
      osVersion: 1804
      kind: micro
      architecture: x64
      pool: 
        vmImage: ubuntu-latest
      machinePool: Open
      queue: Ubuntu.1804.Amd64.Open
      container: ubuntu_x64_build_container
      csproj: src/benchmarks/micro/MicroBenchmarks.csproj
      runCategories: 'runtime libraries'
      channels: # for public jobs we want to make sure that the PRs don't break any of the supported frameworks
        - release/7.0

  # Ubuntu 1804 x64 NativeAOT micro benchmarks
  - template: /eng/performance/benchmark_jobs.yml
    parameters:
      osName: centos
      osVersion: 7
      kind: micro
      architecture: x64
      pool: 
        vmImage: ubuntu-latest
      machinePool: Open
      queue: centos.7.amd64.open
      container: centos_x64_build_container
      csproj: src/benchmarks/micro/MicroBenchmarks.csproj
      runCategories: 'runtime libraries'
      channels:
        - nativeaot7.0

  # Ubuntu 1804 x64 ML.NET benchmarks
  - template: /eng/performance/benchmark_jobs.yml
    parameters:
      osName: ubuntu
      osVersion: 1804
      kind: mlnet
      architecture: x64
      pool: 
        vmImage: ubuntu-latest
      machinePool: Open
      queue: Ubuntu.1804.Amd64.Open
      container: ubuntu_x64_build_container
      runCategories: 'mldotnet'
      csproj: src/benchmarks/real-world/Microsoft.ML.Benchmarks/Microsoft.ML.Benchmarks.csproj
      channels: # for ML.NET jobs we want to check .NET Core 3.1 and 5.0 only
        - release/7.0

  # Ubuntu 1804 x64 F# benchmarks
  - template: /eng/performance/benchmark_jobs.yml
    parameters:
      osName: ubuntu
      osVersion: 1804
      kind: fsharp
      architecture: x64
      pool: 
        vmImage: ubuntu-latest
      machinePool: Open
      queue: Ubuntu.1804.Amd64.Open
      container: ubuntu_x64_build_container
      runCategories: 'fsharp'
      csproj: src/benchmarks/real-world/FSharp/FSharp.fsproj
      channels:
        - release/7.0

  # Ubuntu 1804 x64 Roslyn benchmarks
  - template: /eng/performance/benchmark_jobs.yml
    parameters:
      osName: ubuntu
      osVersion: 1804
      kind: roslyn
      architecture: x64
      pool: 
        vmImage: ubuntu-latest
      machinePool: Open
      queue: Ubuntu.1804.Amd64.Open
      container: ubuntu_x64_build_container
      runCategories: 'roslyn'
      csproj: src/benchmarks/real-world/Roslyn/CompilerBenchmarks.csproj
      channels: # for Roslyn jobs we want to check .NET Core 3.1 and 5.0 only
        - release/7.0
# Ubuntu 1804 x64 ILLink Benchmarks
  - template: /eng/performance/benchmark_jobs.yml
    parameters:
      osName: ubuntu
      osVersion: 1804
      kind: illink
      architecture: x64
      pool:
        vmImage: ubuntu-latest
      machinePool: Open
      queue: Ubuntu.1804.Amd64.Open
      container: ubuntu_x64_build_container
      csproj: src/benchmarks/real-world/ILLink/ILLinkBenchmarks.csproj
      runCategories: 'illink'
      channels:
        - release/7.0

  # Windows x64 ILLinkBenchmarks
  - template: /eng/performance/benchmark_jobs.yml
    parameters:
      osName: windows
      osVersion: 22H1
      kind: illink
      architecture: x64
      pool:
        vmImage: windows-2019
      machinePool: Open
      queue: Windows.10.Amd64.Client21H1.Open
      csproj: src/benchmarks/real-world/ILLink/ILLinkBenchmarks.csproj
      runCategories: 'illink'
      channels:
        - release/7.0

###########################################
# Private Jobs
###########################################

- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest', 'Manual')) }}:

  # Windows x64 scenario benchmarks
  - template: /eng/performance/scenarios.yml
    parameters:
      osName: windows
      osVersion: 19H1
      architecture: x64
      pool:
        vmImage: windows-2019
      kind: scenarios
      machinePool: Tiger
      queue: Windows.10.Amd64.19H1.Tiger.Perf
      projectFile: scenarios.proj
      channels: # for public jobs we want to make sure that the PRs don't break any of the supported channels
        - release/7.0

  # Ubuntu 1804 x64 scenario benchmarks
  - template: /eng/performance/scenarios.yml
    parameters:
      osName: ubuntu
      osVersion: 1804
      kind: scenarios
      architecture: x64
      pool: 
        vmImage: ubuntu-latest
      machinePool: Tiger
      queue: Ubuntu.1804.Amd64.Tiger.Perf # using a dedicated private Helix queue (perftigers)
      container: ubuntu_x64_build_container
      projectFile: scenarios.proj
      channels:
        - release/7.0

  # Windows Arm64 scenario benchmarks
  - template: /eng/performance/scenarios.yml
    parameters:
      osName: windows
      osVersion: 20H1
      architecture: arm64
      pool:
        vmImage: windows-2019
      kind: scenarios
      machinePool: Tiger
      queue: Windows.10.Arm64.Perf.Surf
      projectFile: scenarios.proj
      channels: # for public jobs we want to make sure that the PRs don't break any of the supported channels
        - release/7.0

  # Windows x64 MAUI scenario benchmarks
  - template: /eng/performance/scenarios.yml
    parameters:
      osName: windows
      osVersion: 19H1
      architecture: x64
      pool:
        vmImage: windows-2019
      kind: maui_scenarios
      machinePool: Tiger
      queue: Windows.10.Amd64.19H1.Tiger.Perf
      projectFile: maui_scenarios.proj
      channels: # for public jobs we want to make sure that the PRs don't break any of the supported channels
        - release/7.0

  # # Ubuntu 1804 x64 MAUI scenario benchmarks
  # - template: /eng/performance/scenarios.yml
  #   parameters:
  #     osName: ubuntu
  #     osVersion: 1804
  #     kind: maui_scenarios
  #     architecture: x64
  #     pool: 
  #       vmImage: ubuntu-latest
  #     machinePool: Tiger
  #     queue: Ubuntu.1804.Amd64.Tiger.Perf # using a dedicated private Helix queue (perftigers)
  #     container: ubuntu_x64_build_container
  #     projectFile: maui_scenarios.proj
  #     channels:
  #       - release/7.0

  # Windows Arm64 MAUI scenario benchmarks
  - template: /eng/performance/scenarios.yml
    parameters:
      osName: windows
      osVersion: 20H1
      architecture: arm64
      pool:
        vmImage: windows-2019
      kind: maui_scenarios
      machinePool: Tiger
      queue: Windows.10.Arm64.Perf.Surf
      projectFile: maui_scenarios.proj
      channels: # for public jobs we want to make sure that the PRs don't break any of the supported channels
        - release/7.0

################################################
# Scheduled Private jobs
################################################

# Scheduled runs will run all of the jobs on the PerfTigers, as well as the Arm64 job
- ${{ if and(and(ne(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'Schedule')), not(contains(variables['Build.QueuedBy'], 'Weekly'))) }}:

  # Windows x64 SDK scenario benchmarks
  - template: /eng/performance/scenarios.yml
    parameters:
      osName: windows
      osVersion: RS5
      architecture: x64
      pool:
        vmImage: windows-2019
      kind: sdk_scenarios
      machinePool: Tiger
      queue: Windows.10.Amd64.19H1.Tiger.Perf
      projectFile: sdk_scenarios.proj
      channels:
        - release/7.0
  
  # Windows x86 SDK scenario benchmarks
  - template: /eng/performance/scenarios.yml
    parameters:
      osName: windows
      osVersion: RS5
      architecture: x86
      pool:
        vmImage: windows-2019
      kind: sdk_scenarios
      machinePool: Tiger
      queue: Windows.10.Amd64.19H1.Tiger.Perf
      projectFile: sdk_scenarios.proj
      channels:
        - release/7.0

  # Ubuntu 1804 x64 SDK scenario benchmarks
  - template: /eng/performance/scenarios.yml
    parameters:
      osName: ubuntu
      osVersion: 1804
      architecture: x64
      pool: 
        vmImage: ubuntu-latest
      kind: sdk_scenarios
      machinePool: Tiger
      queue: Ubuntu.1804.Amd64.Tiger.Perf
      container: ubuntu_x64_build_container
      projectFile: sdk_scenarios.proj
      channels:
        - release/7.0

  # Windows x64 Blazor 3.2 scenario benchmarks
  - template: /eng/performance/scenarios.yml
    parameters:
      osName: windows
      osVersion: RS5
      architecture: x64
      pool:
        vmImage: windows-2019
      kind: blazor_scenarios
      machinePool: Tiger
      queue: Windows.10.Amd64.19H1.Tiger.Perf
      projectFile: blazor_scenarios.proj
      channels:
        - release/7.0
  
  # Windows x64 F# benchmarks
  - template: /eng/performance/benchmark_jobs.yml
    parameters:
      osName: windows
      osVersion: RS5
      kind: fsharp
      architecture: x64
      pool:
        vmImage: windows-2019
      machinePool: Tiger
      queue: Windows.10.Amd64.19H1.Tiger.Perf
      csproj: src\benchmarks\real-world\FSharp\FSharp.fsproj
      runCategories: 'fsharp'
      channels:
        - release/7.0

  # Ubuntu 1804 x64 F# benchmarks
  - template: /eng/performance/benchmark_jobs.yml
    parameters:
      osName: ubuntu
      osVersion: 1804
      kind: fsharp
      architecture: x64
      pool: 
        vmImage: ubuntu-latest
      machinePool: Tiger
      queue: Ubuntu.1804.Amd64.Tiger.Perf
      container: ubuntu_x64_build_container
      runCategories: 'fsharp'
      csproj: src/benchmarks/real-world/FSharp/FSharp.fsproj
      channels:
        - release/7.0

  # Secret Sync
  - job: Synchronize
    pool:
      name: NetCore1ESPool-Internal-NoMSI
      demands: ImageOverride -equals 1es-windows-2019
    steps:
    - task: UseDotNet@2
      displayName: Install .NET 6.0 runtime
      inputs:
        version: 6.x

    - script: dotnet tool restore

    - task: AzureCLI@2
      inputs:
        azureSubscription: .NET Performance (790c4451-dad9-4fda-af8b-10bd9ca328fa)
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          Get-ChildItem .vault-config/*.yaml |% { dotnet secret-manager synchronize $_}
  
  # Ubuntu 1804 x64 ILLink Benchmarks
  - template: /eng/performance/benchmark_jobs.yml
    parameters:
      osName: ubuntu
      osVersion: 1804
      kind: illink
      architecture: x64
      pool:
        vmImage: ubuntu-latest
      machinePool: Tiger
      queue: Ubuntu.1804.Amd64.Tiger.Perf # using a dedicated private Helix queue (perftigers)
      container: ubuntu_x64_build_container
      csproj: src/benchmarks/real-world/ILLink/ILLinkBenchmarks.csproj
      runCategories: 'illink'
      channels:
        - release/7.0

  # Windows x64 ILLinkBenchmarks
  - template: /eng/performance/benchmark_jobs.yml
    parameters:
      osName: windows
      osVersion: 22H1
      kind: illink
      architecture: x64
      pool:
        vmImage: windows-2019
      machinePool: Tiger
      queue: Windows.10.Amd64.19H1.Tiger.Perf # using a dedicated private Helix queue (perftigers)
      csproj: src/benchmarks/real-world/ILLink/ILLinkBenchmarks.csproj
      runCategories: 'illink'
      channels:
        - release/7.0

################################################
# Manually Triggered Job
################################################


- ${{ if and(ne(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'Manual')) }}:
  - job: Synchronize
    pool:
      name: NetCore1ESPool-Internal-NoMSI
      demands: ImageOverride -equals 1es-windows-2019
    steps:
    - task: UseDotNet@2
      displayName: Install .NET 6.0 runtime
      inputs:
        version: 6.x

    - script: dotnet tool restore

    - task: AzureCLI@2
      inputs:
        azureSubscription: .NET Performance (790c4451-dad9-4fda-af8b-10bd9ca328fa)
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          Get-ChildItem .vault-config/*.yaml |% { dotnet secret-manager synchronize $_}

################################################
# Scheduled Private jobs (Weekly)
################################################

# Scheduled runs will run all of the jobs on the PerfTigers, as well as the Arm64 job
- ${{ if and(and(ne(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'Schedule')), contains(variables['Build.QueuedBy'], 'Weekly')) }}:
  - job: Synchronize
    pool:
      name: NetCore1ESPool-Internal-NoMSI
      demands: ImageOverride -equals 1es-windows-2019
    steps:
    - task: UseDotNet@2
      displayName: Install .NET 6.0 runtime
      inputs:
        version: 6.x

    - script: dotnet tool restore

    - task: AzureCLI@2
      inputs:
        azureSubscription: .NET Performance (790c4451-dad9-4fda-af8b-10bd9ca328fa)
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          Get-ChildItem .vault-config/*.yaml |% { dotnet secret-manager synchronize $_}
